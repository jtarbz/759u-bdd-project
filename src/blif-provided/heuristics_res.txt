Static heuristics establish a variable order using information available prior to building any BDD while dynamic heuristics try to improve variable order by modifying the existing BDDs

-------------------------------------------------------------
REBUILD is based on the recursive procedure transform-OBDD that is built along the divide-and-conquer principle, and that uses a computed table and dependency check in order to avoid the creation of reducible nodes (and respective 
exponential behavior). adopt a top-down recursive approach and use compute tables to avoid recomputation.

transform-OBDD(R, r, a) 
begin 
(1) if constant(R) 
then return the respective sink of Q; 
(2) if computed(R) then return result; 
(3) o := o(top_var(r, R))^1 , where 
top_vat(r, R) = min{ i | R depends on r[i]}; 
(4) R0:=restrict_and_veduce(R,r[1] = 0); 
(5) v0:=transform-OBDD(R0, r(2), a U {r[1] = 0}); 
(6) Rl:=restricaand_reduee(R, r[1] = 1); 
(7) vl:=transform-OSDD(R1, r(2), a U {r[1] = 1)); 
(8) create a new node v of Q, labeled with r[1], 
with then-son vl and else-son v0; 
(9) store_in_computed_table(signature(R),a,v);
(10) return v
end 

computed(S) 
begin 
(2.1) sgn :=signature(S); 
(2.2) for each item I = (sgn, a', v') in the computed table 
(2.2.1) S' =restrict_and_reduce(P, a'); 
(2.2.2) if S' === S return v'; 
end 

https://link.springer.com/chapter/10.1007/3-540-60045-0_36

-------------------------------------------------------------
https://link-springer-com.proxy-um.researchport.umd.edu/article/10.1007/s002360050083

-------------------------------------------------------------

Sifting
 • Dynamic variable re-ordering, proposed by R. Rudell 
• Based on a primitive “swap” operation that 
interchanges xi and xi+1 in the variable order
 Key point: the swap is a local operation involving only 
levels i and i+1
 • Overall idea: pick a variable xi and move it up 
and down the order using swaps until the 
process no longer improves the size


https://essay.utwente.nl/96753/1/Pistek_MA_EEMCS.pdf

-------------------------------------------------------------


The idea is to utilize, as frequently as possible, the fan-in 2 read-once order combination technique on non-overlapping gate inputs. To be more specific, when orders from two gate inputs do not share events, the Sauerhoff, Wegener and Wercher algorithm is applied. However, if they do share events, they are combined according to the number of BDD nodes generated for each event in these orders. 
https://journals.sagepub.com/doi/full/10.1177/1748006X19879305


-------------------------------------------------------------

Our algorithm is as follows: 
1. Begin with any random or heuristic variable ordering. 
2. Perform the desired sequence of BDD operations to construct and manipulate BDD functions. 
3. Throughout the sequence of operations. monitor the size of the BDD and dynamically reorder variables whenever necessary to reduce BDD size. 
The variable order is dynamic rather than fixed and the current order is abstracted from the user in the sense that the user's interface to the BDD package is unchanged after the addition of the dynamic ordering routines. 
The reordering is performed with the following algorithm, which is iterated until certain stopping criteria are satisfied: 
1. Select a window of consecutive variables in the BDD. 
2. Calculate a good order for the variables within the selected window. 
3. Rearrange the variable order in the window to match the computed good order. 

https://ieeexplore-ieee-org.proxy-um.researchport.umd.edu/document/410627

-------------------------------------------------------------

The DSCF (Dynamic Short Cubes First) Heuristic. 
In order to achieve the goal of maintaining as many 
continuously processed patterns as possible, we propose a 
very simple heuristic : 
DSCF alg:
1. Express the function in the optimal pattern cover form. 
2. Sort the patterns according to their lengths. 
3. Pick the next variable to be added to the ordered sequence from the set of the shortest patterns. In case of a tie, apply one of the following strategies: 
vl: The variable which appears in the largest number of unprocessed yet patterns, i. e. the most globally binate variable of shortest patterns is picked, if tie, just pick the first one. 
v2: The variable which appears in the largest number of these shortest patterns is picked, if tie, check the next longer pattern list until the tie is broken. 
4. After a variable has been picked, delete this variable 
(including its complement) from all patterns. 
5. Back to 2 until all variables are picked.


https://ieeexplore-ieee-org.proxy-um.researchport.umd.edu/stamp/stamp.jsp?tp=&arnumber=386464